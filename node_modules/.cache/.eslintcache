[{"c:\\Tutorials\\elp-app\\src\\index.js":"1","c:\\Tutorials\\elp-app\\src\\App.js":"2","c:\\Tutorials\\elp-app\\src\\reportWebVitals.js":"3","C:\\Tutorials\\elp-app\\src\\index.js":"4","C:\\Tutorials\\elp-app\\src\\App.js":"5","C:\\Tutorials\\elp-app\\src\\reportWebVitals.js":"6","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Picker.js":"7","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Modal.js":"8","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Hue.js":"9","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Input.js":"10","C:\\Tutorials\\elp-app\\src\\components\\Picker\\utils.js":"11","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Square.js":"12","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Svg.js":"13","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Menu.js":"14","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Alpha.js":"15","C:\\Tutorials\\elp-app\\src\\components\\Picker\\config.js":"16","C:\\Tutorials\\elp-app\\src\\components\\Picker\\usePaintHue.js":"17","C:\\Tutorials\\elp-app\\src\\components\\Picker\\usePaintSquare.js":"18","C:\\Tutorials\\elp-app\\src\\components\\Picker\\usePaintAlpha.js":"19","C:\\Tutorials\\elp-app\\src\\GlobalStyle.js":"20"},{"size":500,"mtime":1621489652043,"results":"21","hashOfConfig":"22"},{"size":111779,"mtime":1624257276907,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":564,"mtime":1648748713507,"results":"25","hashOfConfig":"26"},{"size":129471,"mtime":1650922368609,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":15819,"mtime":1649184568425,"results":"29","hashOfConfig":"26"},{"size":1374,"mtime":1648834136183,"results":"30","hashOfConfig":"26"},{"size":2598,"mtime":1648722122191,"results":"31","hashOfConfig":"26"},{"size":1437,"mtime":1648804161583,"results":"32","hashOfConfig":"26"},{"size":4238,"mtime":1648794170571,"results":"33","hashOfConfig":"26"},{"size":3054,"mtime":1648722122119,"results":"34","hashOfConfig":"26"},{"size":3530,"mtime":1648739806808,"results":"35","hashOfConfig":"26"},{"size":1276,"mtime":1648722122338,"results":"36","hashOfConfig":"26"},{"size":2697,"mtime":1648722122155,"results":"37","hashOfConfig":"26"},{"size":189,"mtime":1648828068030,"results":"38","hashOfConfig":"26"},{"size":537,"mtime":1648722121843,"results":"39","hashOfConfig":"26"},{"size":916,"mtime":1648722121796,"results":"40","hashOfConfig":"26"},{"size":1030,"mtime":1648722122009,"results":"41","hashOfConfig":"26"},{"size":319,"mtime":1648722121884,"results":"42","hashOfConfig":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dpjw93",{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1itc4ut",{"filePath":"52","messages":"53","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"51"},"c:\\Tutorials\\elp-app\\src\\index.js",[],"c:\\Tutorials\\elp-app\\src\\App.js",["91","92","93","94","95","96"],"c:\\Tutorials\\elp-app\\src\\reportWebVitals.js",[],"C:\\Tutorials\\elp-app\\src\\index.js",[],["97","98"],"C:\\Tutorials\\elp-app\\src\\App.js",["99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127"],"C:\\Tutorials\\elp-app\\src\\reportWebVitals.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\Picker.js",["128","129","130","131"],"import React, { useState, useRef, useEffect, forwardRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  parseHSL,\r\n  convertHSLToRGB,\r\n  copyToClipboard,\r\n  RGBAToHSLA,\r\n} from \"./utils\";\r\nimport Modal from \"./Modal\";\r\nimport Hue from \"./Hue\";\r\nimport Square from \"./Square\";\r\nimport Input from \"./Input\";\r\nimport Alpha from \"./Alpha\";\r\nimport Svg from \"./Svg\";\r\nimport Menu from \"./Menu\";\r\nimport config from \"./config\";\r\nimport imgNone from \"./../../images/no.png\";\r\n\r\nconst defaultColors = Array.from({ length: 10 }, () => \"\");\r\n\r\nconst { squareSize, barSize, crossSize, inputSize, outputSize, colorsSize } =\r\n  config;\r\n\r\nexport const PickerWrapper = styled.div`\r\n  user-select: none;\r\n`;\r\n\r\nexport const SwatchWrapper = styled.div.attrs((p) => ({\r\n  style: {\r\n    backgroundColor: p.color,\r\n    backgroundImage: p.color !== \"nill\" ? \"none\" : `url(${p.bg})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n  },\r\n}))`\r\n  width: 50px;\r\n  height: 20px;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const PickerOuter = styled.div`\r\n  width: ${squareSize + 20}px;\r\n  display: grid;\r\n  border-radius: 2px;\r\n  background: #ffffff;\r\n  box-shadow: 0 3px 3px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nexport const PickerInner = styled.div.attrs((p) => ({\r\n  style: {\r\n    gridTemplateRows: p.showColors\r\n      ? `${squareSize + 20}px ${barSize}px ${\r\n          barSize + 10\r\n        }px ${inputSize}px ${outputSize}px ${colorsSize}px`\r\n      : `${squareSize + 20}px ${barSize}px ${\r\n          barSize + 10\r\n        }px ${inputSize}px ${outputSize}px`,\r\n  },\r\n}))`\r\n  display: grid;\r\n  align-items: center;\r\n  justify-items: center;\r\n`;\r\n\r\nexport const Inputs = styled.div`\r\n  align-self: flex-end;\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  align-items: center;\r\n  justify-items: center;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n`;\r\n\r\nexport const Outputs = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 10px;\r\n  justify-items: center;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  .arrow {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    &:hover svg {\r\n      fill: #333333;\r\n    }\r\n    svg {\r\n      width: 12px;\r\n      height: 12px;\r\n      fill: #606060;\r\n    }\r\n  }\r\n  .noColor {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    &:hover svg {\r\n      fill: #dd0000;\r\n    }\r\n    svg {\r\n      width: 20px;\r\n      height: 20px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const OutputText = styled.div`\r\n  align-self: center;\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: 20px 1fr;\r\n  align-items: center;\r\n  border: 1px solid #ddd;\r\n  .cycle {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    svg {\r\n      width: 12px;\r\n      height: 12px;\r\n      fill: #606060;\r\n    }\r\n  }\r\n  input {\r\n    justify-self: flex-start;\r\n    width: 100%;\r\n    text-align: center;\r\n    font-family: monospace;\r\n    font-size: 15px;\r\n    outline: 0;\r\n    border: 0;\r\n    padding: 4px 2px;\r\n    cursor: auto;\r\n    &::selection {\r\n      background: transparent;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Colors = styled.div`\r\n  width: 100%;\r\n  height: ${colorsSize}px;\r\n  display: ${(p) => (p.show ? \"grid\" : \"none\")};\r\n  grid-template-columns: repeat(6, 1fr);\r\n  grid-template-rows: 1fr 1fr;\r\n  align-items: center;\r\n  justify-items: start;\r\n  padding-bottom: 5px;\r\n  padding-right: 10px;\r\n  padding-left: 10px;\r\n  button {\r\n    font-size: 11px;\r\n    width: 50px;\r\n    height: 28px;\r\n  }\r\n`;\r\n\r\nexport const Color = styled.div`\r\n  width: 30px;\r\n  height: 30px;\r\n  background: ${(p) => p.color || \"#fafafa\"};\r\n  border: 1px solid #ddd;\r\n`;\r\n\r\nexport const ColorAction = styled.div.attrs((p) => ({\r\n  style: {\r\n    gridColumn: p.col,\r\n    gridRow: p.row,\r\n  },\r\n}))`\r\n  width: 25px;\r\n  height: 25px;\r\n  display: grid;\r\n  align-items: center;\r\n  justify-items: center;\r\n  font-size: 14px;\r\n  svg {\r\n    width: 12px;\r\n    height: 12px;\r\n    fill: #606060;\r\n  }\r\n`;\r\n\r\nfunction computeHueX(h) {\r\n  return Math.round((squareSize / 360) * h - barSize / 2);\r\n}\r\n\r\nfunction computeSquareXY(s, l) {\r\n  const t = (s * (l < 50 ? l : 100 - l)) / 100;\r\n  const s1 = Math.round((200 * t) / (l + t)) | 0;\r\n  const b1 = Math.round(t + l);\r\n  const x = (squareSize / 100) * s1 - crossSize / 2;\r\n  const y = squareSize - (squareSize / 100) * b1 - crossSize / 2;\r\n  return [x, y];\r\n}\r\n\r\nfunction computeAlphaX(a) {\r\n  return Math.round((squareSize / 100) * a - barSize / 2);\r\n}\r\n\r\nconst Picker = forwardRef(({ swatchStyle, setPickerColor, type }, ref) => {\r\n  const [show, setShow] = useState(false);\r\n  const [position, setPosition] = useState([0, 0]);\r\n  const [hue, setHue] = useState(180);\r\n  const [hueX, setHueX] = useState(() => squareSize / 2 - barSize / 2);\r\n  const [square, setSquare] = useState([0, type === \"Stroke\" ? 0 : 100]);\r\n  const [squareXY, setSquareXY] = useState(() => [\r\n    squareSize - crossSize / 2,\r\n    crossSize / -2,\r\n  ]);\r\n  const [alpha, setAlpha] = useState(100);\r\n  const [alphaX, setAlphaX] = useState(squareSize - barSize / 2);\r\n  const [offsetTop, setOffsetTop] = useState(0);\r\n  const [offsetLeft, setOffsetLeft] = useState(0);\r\n  const [color, setColor] = useState(\r\n    type === \"Stroke\" ? `hsla(180, 0%, 0%, 1)` : `hsla(180, 0%, 100%, 1)`\r\n  );\r\n  const [outputFormat, setOutputFormat] = useState(\"hsla\");\r\n  const [copied, setCopied] = useState(false);\r\n  const [animate, setAnimate] = useState(false);\r\n  const [showColors, setShowColors] = useState(false);\r\n  const [colors, setColors] = useState(defaultColors);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const [positionMenu, setPositionMenu] = useState([0, 0]);\r\n  const [swatchBG, setSwatchBG] = useState(\"\");\r\n  const modalPicker = useRef(null);\r\n  const modalMenu = useRef(null);\r\n  const modalSwatch = useRef(null);\r\n  const setActiveStrokeColor = (strokeColor) => {\r\n    //console.log(\"calling child fn... params are: \", strokeColor);\r\n    if (strokeColor !== \"nill\") {\r\n      let c = RGBAToHSLA(strokeColor);\r\n      setColor(c);\r\n      let [h, s, l, a] = parseHSL(c);\r\n      onHueChange(h);\r\n      setSquare([s, l]);\r\n      setSquareXY(computeSquareXY(s, l));\r\n      onAlphaChange(a * 100);\r\n      //console.log(hs);\r\n    } else {\r\n      setColor(\"nill\");\r\n    }\r\n  };\r\n\r\n  ref.current = setActiveStrokeColor;\r\n  useEffect(() => {\r\n    let initalColors =\r\n      JSON.parse(window.localStorage.getItem(type + \"_colors\")) ||\r\n      defaultColors;\r\n    setColors(initalColors);\r\n    //activeObjectStrokeRef.current = changeColor;\r\n  }, [type]);\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(type + \"_colors\", JSON.stringify(colors));\r\n  }, [type, colors]);\r\n\r\n  useEffect(() => {\r\n    function onResize() {\r\n      const { innerWidth, innerHeight } = window;\r\n      const x = innerWidth / 2 - (squareSize + 20) / 2;\r\n      const y =\r\n        innerHeight / 2 -\r\n        (squareSize +\r\n          20 +\r\n          barSize +\r\n          barSize +\r\n          5 +\r\n          inputSize +\r\n          outputSize +\r\n          colorsSize) /\r\n          2;\r\n      let px = modalSwatch.current.offsetLeft;\r\n      let py = modalSwatch.current.offsetTop + 25;\r\n      setPosition([px, py]);\r\n      setOffsetTop(modalPicker.current.offsetTop);\r\n      setOffsetLeft(modalPicker.current.offsetLeft);\r\n    }\r\n    if (modalPicker.current) {\r\n      onResize();\r\n      window.addEventListener(\"resize\", onResize);\r\n    } else {\r\n      window.removeEventListener(\"resize\", onResize);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", onResize);\r\n    };\r\n  }, [show]);\r\n\r\n  useEffect(() => {\r\n    let id;\r\n    if (copied) {\r\n      id = setTimeout(() => setCopied(false), 4000);\r\n    }\r\n    return () => {\r\n      clearTimeout(id);\r\n    };\r\n  }, [copied]);\r\n\r\n  useEffect(() => {\r\n    setColor(`hsla(${hue}, ${square[0]}%, ${square[1]}%, ${alpha / 100})`);\r\n    let c = `hsla(${hue}, ${square[0]}%, ${square[1]}%, ${alpha / 100})`;\r\n    setPickerColor(convertHSLToRGB(parseHSL(c)).rgba);\r\n    //let { red, green, blue, a } = convertHSLToRGB(parseHSL(c));\r\n    //console.log(red, green, blue, a);\r\n  }, [hue, square, alpha, setPickerColor]);\r\n\r\n  function onHueChange(n) {\r\n    setAnimate(true);\r\n    setHue(n);\r\n    setHueX(computeHueX(n));\r\n    let c = `hsla(${n}, ${square[0]}%, ${square[1]}%, ${alpha / 100})`;\r\n    setPickerColor(convertHSLToRGB(parseHSL(c)).rgba);\r\n  }\r\n\r\n  function onSaturationChange(n) {\r\n    setAnimate(true);\r\n    setSquare([n, square[1]]);\r\n    setSquareXY(computeSquareXY(n, square[1]));\r\n    let c = `hsla(${hue}, ${n}%, ${square[1]}%, ${alpha / 100})`;\r\n    setPickerColor(convertHSLToRGB(parseHSL(c)).rgba);\r\n  }\r\n\r\n  function onLightnessChange(n) {\r\n    setAnimate(true);\r\n    setSquare([square[0], n]);\r\n    setSquareXY(computeSquareXY(square[0], n));\r\n    let c = `hsla(${hue}, ${square[0]}%, ${n}%, ${alpha / 100})`;\r\n    setPickerColor(convertHSLToRGB(parseHSL(c)).rgba);\r\n  }\r\n\r\n  function onAlphaChange(n) {\r\n    setAnimate(true);\r\n    setAlpha(n);\r\n    setAlphaX(computeAlphaX(n));\r\n    let c = `hsla(${hue}, ${square[0]}%, ${square[1]}%, ${n})`;\r\n    setPickerColor(convertHSLToRGB(parseHSL(c)).rgba);\r\n  }\r\n\r\n  function addColor() {\r\n    let index = colors.findIndex((c) => !c);\r\n    if (index !== -1) {\r\n      let newColors = colors.slice();\r\n      newColors[index] = color;\r\n      setColors(newColors);\r\n    }\r\n  }\r\n\r\n  function removeColor(e, i) {\r\n    e.preventDefault();\r\n    let shouldRemove = window.confirm(\"Delete color?\");\r\n    if (shouldRemove) {\r\n      let newColors = colors.slice();\r\n      newColors.splice(i, 1, \"\");\r\n      setColors(newColors);\r\n    }\r\n  }\r\n\r\n  function resetColors() {\r\n    let shouldReset = window.confirm(\"Delete all colors?\");\r\n    if (shouldReset) {\r\n      setColors(defaultColors);\r\n      setShowMenu(false);\r\n    }\r\n  }\r\n\r\n  function onColorClick(c) {\r\n    if (c) {\r\n      setPickerColor(convertHSLToRGB(parseHSL(c)).rgba);\r\n      let [h, s, l, a] = parseHSL(c);\r\n      onHueChange(h);\r\n      setSquare([s, l]);\r\n      setSquareXY(computeSquareXY(s, l));\r\n      onAlphaChange(a * 100);\r\n      copyToClipboard(formatOutput(c));\r\n      setCopied(true);\r\n    }\r\n  }\r\n\r\n  function formatOutput(c) {\r\n    if (outputFormat === \"hsla\") return c;\r\n    else if (outputFormat === \"rgba\") return convertHSLToRGB(parseHSL(c)).rgba;\r\n    else if (outputFormat === \"hexa\") return convertHSLToRGB(parseHSL(c)).hexa;\r\n  }\r\n\r\n  function cycleFormat() {\r\n    setOutputFormat((curr) =>\r\n      curr === \"hsla\" ? \"rgba\" : curr === \"rgba\" ? \"hexa\" : \"hsla\"\r\n    );\r\n  }\r\n\r\n  function openMenu(e) {\r\n    const { clientX, clientY } = e;\r\n    setPositionMenu([clientX + 20, clientY - 100]);\r\n    setShowMenu(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PickerWrapper color={color}>\r\n        <SwatchWrapper\r\n          styles={swatchStyle}\r\n          ref={modalSwatch}\r\n          color={color}\r\n          bg={swatchBG}\r\n          onClick={() => setShow(true)}\r\n        />\r\n        <Modal\r\n          modal={modalPicker}\r\n          show={show}\r\n          position={position}\r\n          zIndex={2}\r\n          backdrop={true}\r\n          animate={true}\r\n          onClose={() => setShow(false)}\r\n        >\r\n          <PickerOuter>\r\n            <PickerInner showColors={showColors}>\r\n              <Square\r\n                hue={hue}\r\n                squareXY={squareXY}\r\n                offsetTop={offsetTop}\r\n                offsetLeft={offsetLeft}\r\n                animate={animate}\r\n                setSquare={setSquare}\r\n                setSquareXY={setSquareXY}\r\n                setAnimate={setAnimate}\r\n              />\r\n              <Hue\r\n                hueX={hueX}\r\n                offsetLeft={offsetLeft}\r\n                animate={animate}\r\n                setHueX={setHueX}\r\n                setHue={setHue}\r\n                setAnimate={setAnimate}\r\n              />\r\n              <Alpha\r\n                hue={hue}\r\n                alphaX={alphaX}\r\n                offsetLeft={offsetLeft}\r\n                animate={animate}\r\n                setAlpha={setAlpha}\r\n                setAlphaX={setAlphaX}\r\n                setAnimate={setAnimate}\r\n              />\r\n              <Inputs>\r\n                <Input\r\n                  label=\"H\"\r\n                  value={hue}\r\n                  min={0}\r\n                  max={360}\r\n                  defaultValue={180}\r\n                  setValue={onHueChange}\r\n                />\r\n                <Input\r\n                  label=\"S\"\r\n                  value={square[0]}\r\n                  min={0}\r\n                  max={100}\r\n                  defaultValue={100}\r\n                  setValue={onSaturationChange}\r\n                />\r\n                <Input\r\n                  label=\"L\"\r\n                  value={square[1]}\r\n                  min={0}\r\n                  max={100}\r\n                  defaultValue={100}\r\n                  setValue={onLightnessChange}\r\n                />\r\n                <Input\r\n                  label=\"A\"\r\n                  value={alpha}\r\n                  min={0}\r\n                  max={100}\r\n                  defaultValue={100}\r\n                  setValue={onAlphaChange}\r\n                />\r\n              </Inputs>\r\n              <Outputs>\r\n                <OutputText>\r\n                  <div className=\"cycle\" onClick={cycleFormat}>\r\n                    <Svg name=\"refresh\" />\r\n                  </div>\r\n                  <input\r\n                    value={copied ? \"Copied...\" : formatOutput(color)}\r\n                    readOnly={true}\r\n                    onClick={() => onColorClick(color)}\r\n                  />\r\n                </OutputText>\r\n                {/* <div\r\n                    className=\"noColor\"\r\n                    // onClick={() => setShowColors(!showColors)}\r\n                  >\r\n                    <Svg name=\"noColor\" />\r\n                  </div> */}\r\n              </Outputs>\r\n              <Colors show={true}>\r\n                {colors.map((c, i) => (\r\n                  <Color\r\n                    key={i}\r\n                    color={c}\r\n                    onClick={() => onColorClick(c)}\r\n                    onContextMenu={(e) => removeColor(e, i)}\r\n                  />\r\n                ))}\r\n                <ColorAction col={6} row={1} onClick={addColor}>\r\n                  <Svg name=\"add\" />\r\n                </ColorAction>\r\n                <ColorAction col={6} row={2}>\r\n                  <button\r\n                    style={\r\n                      {\r\n                        // backgroundImage: `url(${imgNone})`,\r\n                        // backgroundRepeat: \"no-repeat\",\r\n                        // backgroundSize: \"cover\",\r\n                        // color: \"white\",\r\n                      }\r\n                    }\r\n                    onClick={() => {\r\n                      setSwatchBG(imgNone);\r\n                      setColor(\"nill\");\r\n                      setPickerColor(\"nill\");\r\n                      //console.log(\"clicked\");\r\n                    }}\r\n                  >\r\n                    No {type}\r\n                  </button>\r\n                </ColorAction>\r\n                {/* <ColorAction col={6} row={2} onClick={openMenu}>\r\n                  <Svg name=\"menu\" />\r\n                </ColorAction> */}\r\n              </Colors>\r\n            </PickerInner>\r\n          </PickerOuter>\r\n        </Modal>\r\n        <Modal\r\n          modal={modalMenu}\r\n          show={showMenu}\r\n          position={positionMenu}\r\n          zIndex={4}\r\n          backdrop={false}\r\n          animate={false}\r\n          onClose={() => setShowMenu(false)}\r\n        >\r\n          <Menu resetColors={resetColors} />\r\n        </Modal>\r\n      </PickerWrapper>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Picker;\r\n","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Modal.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\Hue.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\Input.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\utils.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\Square.js",["132"],"import React, { useRef, useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport throttle from \"lodash.throttle\"\r\nimport { convertRGBtoHSL } from \"./utils\"\r\nimport Svg from \"./Svg\"\r\nimport usePaintSquare from \"./usePaintSquare\"\r\nimport config from \"./config\"\r\n\r\nconst { squareSize, crossSize, delay } = config\r\n\r\nexport const SquareWrapper = styled.div`\r\n  position: relative;\r\n  width: ${squareSize + \"px\"};\r\n  height: ${squareSize + \"px\"};\r\n  cursor: crosshair;\r\n`\r\n\r\nexport const Canvas = styled.canvas.attrs(p => ({\r\n  width: squareSize,\r\n  height: squareSize\r\n}))``\r\n\r\nexport const Cross = styled.div.attrs(p => ({\r\n  style: {\r\n    top: p.top + \"px\",\r\n    left: p.left + \"px\",\r\n    width: crossSize + \"px\",\r\n    height: crossSize + \"px\",\r\n    transition: p.animate ? \"top .2s ease-out, left .2s ease-out\" : \"0s\"\r\n  }\r\n}))`\r\n  position: absolute;\r\n  display: grid;\r\n  justify-items: center;\r\n  align-items: center;\r\n  svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst Square = ({\r\n  hue,\r\n  squareXY,\r\n  animate,\r\n  setSquare,\r\n  offsetTop,\r\n  offsetLeft,\r\n  setSquareXY,\r\n  setAnimate\r\n}) => {\r\n  const square = useRef(null)\r\n  const canvas = useRef(null)\r\n\r\n  usePaintSquare(canvas, hue)\r\n\r\n  useEffect(() => {\r\n    const canvasRef = canvas.current\r\n    const ctx = canvasRef.getContext(\"2d\")\r\n\r\n    function computePosition(e) {\r\n      const x = Math.max(\r\n        crossSize / -2,\r\n        Math.min(\r\n          e.clientX - offsetLeft - crossSize + 2.5,\r\n          squareSize - crossSize / 2\r\n        )\r\n      )\r\n      const y = Math.max(\r\n        crossSize / -2,\r\n        Math.min(\r\n          e.clientY - offsetTop - crossSize + 2.5,\r\n          squareSize - crossSize / 2\r\n        )\r\n      )\r\n\r\n      return [x, y]\r\n    }\r\n\r\n    function changeColor(e) {\r\n      const [x, y] = computePosition(e)\r\n      const x1 = Math.min(x + crossSize / 2, squareSize - 1)\r\n      const y1 = Math.min(y + crossSize / 2, squareSize - 1)\r\n      const [r, g, b] = ctx.getImageData(x1, y1, 1, 1).data\r\n      const [h, s, l] = convertRGBtoHSL([r, g, b])\r\n      setSquare([s, l])\r\n      setSquareXY([x, y])\r\n    }\r\n\r\n    const onMouseMove = throttle(e => {\r\n      changeColor(e)\r\n    }, delay)\r\n\r\n    function onMouseUp(e) {\r\n      changeColor(e)\r\n      document.body.removeEventListener(\"mousemove\", onMouseMove)\r\n      document.body.removeEventListener(\"mouseup\", onMouseUp)\r\n    }\r\n\r\n    function onMouseDown(e) {\r\n      setAnimate(false)\r\n      document.body.addEventListener(\"mousemove\", onMouseMove)\r\n      document.body.addEventListener(\"mouseup\", onMouseUp)\r\n    }\r\n\r\n    canvasRef.addEventListener(\"mousedown\", onMouseDown)\r\n\r\n    return () => {\r\n      canvasRef.removeEventListener(\"mousedown\", onMouseDown)\r\n    }\r\n  }, [offsetTop, offsetLeft, setSquare, setSquareXY, setAnimate])\r\n\r\n  return (\r\n    <SquareWrapper ref={square}>\r\n      <Cross top={squareXY[1]} left={squareXY[0]} animate={animate}>\r\n        <Svg name=\"cross\" />\r\n      </Cross>\r\n      <Canvas ref={canvas} />\r\n    </SquareWrapper>\r\n  )\r\n}\r\n\r\nexport default Square\r\n","C:\\Tutorials\\elp-app\\src\\components\\Picker\\Svg.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\Menu.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\Alpha.js",[],"C:\\Tutorials\\elp-app\\src\\components\\Picker\\config.js",["133"],"export default {\r\n  squareSize: 300,\r\n  barSize: 30,\r\n  crossSize: 15,\r\n  inputSize: 45,\r\n  outputSize: 50,\r\n  colorsSize: 80,\r\n  checkerSize: 4,\r\n  checkerFill: \"#ddd\",\r\n  delay: 75,\r\n};\r\n","C:\\Tutorials\\elp-app\\src\\components\\Picker\\usePaintHue.js",["134"],"import React, { useEffect } from \"react\"\r\nimport config from \"./config\"\r\n\r\nconst { squareSize, barSize } = config\r\n\r\nconst usePaintHue = canvas => {\r\n  useEffect(() => {\r\n    const ctx = canvas.current.getContext(\"2d\")\r\n    ctx.rect(0, 0, squareSize, barSize)\r\n\r\n    const gradient = ctx.createLinearGradient(0, 0, squareSize, 0)\r\n    for (let i = 0; i <= 360; i += 30) {\r\n      gradient.addColorStop(i / 360, `hsl(${i}, 100%, 50%)`)\r\n    }\r\n    ctx.fillStyle = gradient\r\n    ctx.fill()\r\n  }, [canvas])\r\n}\r\n\r\nexport default usePaintHue\r\n","C:\\Tutorials\\elp-app\\src\\components\\Picker\\usePaintSquare.js",["135"],"import React, { useEffect } from \"react\"\r\nimport config from \"./config\"\r\n\r\nconst { squareSize } = config\r\n\r\nconst usePaintSquare = (canvas, hue) => {\r\n  useEffect(() => {\r\n    const ctx = canvas.current.getContext(\"2d\")\r\n    ctx.fillStyle = `hsl(${hue}, 100%, 50%)`\r\n    ctx.fillRect(0, 0, squareSize, squareSize)\r\n    const gradientWhite = ctx.createLinearGradient(0, 0, squareSize, 0)\r\n    gradientWhite.addColorStop(0, `rgba(255, 255, 255, 1)`)\r\n    gradientWhite.addColorStop(1, `rgba(255, 255, 255, 0)`)\r\n    ctx.fillStyle = gradientWhite\r\n    ctx.fillRect(0, 0, squareSize, squareSize)\r\n    const gradientBlack = ctx.createLinearGradient(0, 0, 0, squareSize)\r\n    gradientBlack.addColorStop(0, `rgba(0, 0, 0, 0)`)\r\n    gradientBlack.addColorStop(1, `rgba(0, 0, 0, 1)`)\r\n    ctx.fillStyle = gradientBlack\r\n    ctx.fillRect(0, 0, squareSize, squareSize)\r\n  }, [canvas, hue])\r\n}\r\n\r\nexport default usePaintSquare\r\n","C:\\Tutorials\\elp-app\\src\\components\\Picker\\usePaintAlpha.js",["136"],"import React, { useEffect } from \"react\"\r\nimport config from \"./config\"\r\n\r\nconst { squareSize, barSize, checkerSize, checkerFill } = config\r\n\r\nconst usePaintAlpha = (canvas, hue) => {\r\n  useEffect(() => {\r\n    const ctx = canvas.current.getContext(\"2d\")\r\n    ctx.clearRect(0, 0, squareSize, barSize)\r\n\r\n    const rows = Math.round(barSize / checkerSize)\r\n    const cols = Math.round(squareSize / checkerSize)\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols / 2; j++) {\r\n        const x = j * checkerSize * 2 + (i % 2 ? 0 : checkerSize)\r\n        const y = i * checkerSize\r\n        ctx.rect(x, y, checkerSize, checkerSize)\r\n      }\r\n    }\r\n    ctx.fillStyle = checkerFill\r\n    ctx.fill()\r\n\r\n    const gradient = ctx.createLinearGradient(0, 0, squareSize, 0)\r\n    gradient.addColorStop(0, `hsla(${hue}, 100%, 50%, 0)`)\r\n    gradient.addColorStop(1, `hsla(${hue}, 100%, 50%, 1)`)\r\n    ctx.fillStyle = gradient\r\n    ctx.fillRect(0, 0, squareSize, barSize)\r\n  }, [canvas, hue])\r\n}\r\n\r\nexport default usePaintAlpha\r\n","C:\\Tutorials\\elp-app\\src\\GlobalStyle.js",["137"],"import React from \"react\"\r\nimport { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n  font-size: 10px;\r\n}\r\nbody {\r\n  font-family: monospace;\r\n  font-weight: bold;\r\n  margin: 0;\r\n}\r\n*, *:before, *:after {\r\n    box-sizing: inherit;\r\n}\r\n`\r\n",{"ruleId":"138","severity":1,"message":"139","line":238,"column":10,"nodeType":"140","messageId":"141","endLine":238,"endColumn":14},{"ruleId":"142","severity":1,"message":"143","line":1692,"column":13,"nodeType":"140","messageId":"144","endLine":1692,"endColumn":16},{"ruleId":"138","severity":1,"message":"145","line":1702,"column":17,"nodeType":"140","messageId":"141","endLine":1702,"endColumn":22},{"ruleId":"138","severity":1,"message":"146","line":1703,"column":17,"nodeType":"140","messageId":"141","endLine":1703,"endColumn":24},{"ruleId":"138","severity":1,"message":"147","line":1704,"column":17,"nodeType":"140","messageId":"141","endLine":1704,"endColumn":22},{"ruleId":"148","severity":1,"message":"149","line":2015,"column":6,"nodeType":"150","endLine":2015,"endColumn":40,"suggestions":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"138","severity":1,"message":"156","line":3,"column":10,"nodeType":"140","messageId":"141","endLine":3,"endColumn":22},{"ruleId":"138","severity":1,"message":"157","line":50,"column":8,"nodeType":"140","messageId":"141","endLine":50,"endColumn":19},{"ruleId":"138","severity":1,"message":"158","line":51,"column":8,"nodeType":"140","messageId":"141","endLine":51,"endColumn":17},{"ruleId":"138","severity":1,"message":"159","line":326,"column":9,"nodeType":"140","messageId":"141","endLine":326,"endColumn":19},{"ruleId":"138","severity":1,"message":"160","line":327,"column":9,"nodeType":"140","messageId":"141","endLine":327,"endColumn":17},{"ruleId":"138","severity":1,"message":"161","line":332,"column":10,"nodeType":"140","messageId":"141","endLine":332,"endColumn":26},{"ruleId":"138","severity":1,"message":"162","line":332,"column":28,"nodeType":"140","messageId":"141","endLine":332,"endColumn":47},{"ruleId":"138","severity":1,"message":"163","line":345,"column":9,"nodeType":"140","messageId":"141","endLine":345,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":393,"column":10,"nodeType":"140","messageId":"141","endLine":393,"endColumn":14},{"ruleId":"138","severity":1,"message":"164","line":401,"column":10,"nodeType":"140","messageId":"141","endLine":401,"endColumn":29},{"ruleId":"138","severity":1,"message":"165","line":430,"column":9,"nodeType":"140","messageId":"141","endLine":430,"endColumn":26},{"ruleId":"138","severity":1,"message":"166","line":445,"column":9,"nodeType":"140","messageId":"141","endLine":445,"endColumn":24},{"ruleId":"138","severity":1,"message":"167","line":460,"column":9,"nodeType":"140","messageId":"141","endLine":460,"endColumn":29},{"ruleId":"138","severity":1,"message":"168","line":463,"column":9,"nodeType":"140","messageId":"141","endLine":463,"endColumn":26},{"ruleId":"138","severity":1,"message":"169","line":466,"column":9,"nodeType":"140","messageId":"141","endLine":466,"endColumn":24},{"ruleId":"138","severity":1,"message":"170","line":469,"column":9,"nodeType":"140","messageId":"141","endLine":469,"endColumn":29},{"ruleId":"138","severity":1,"message":"171","line":472,"column":9,"nodeType":"140","messageId":"141","endLine":472,"endColumn":27},{"ruleId":"138","severity":1,"message":"172","line":491,"column":9,"nodeType":"140","messageId":"141","endLine":491,"endColumn":25},{"ruleId":"138","severity":1,"message":"173","line":508,"column":9,"nodeType":"140","messageId":"141","endLine":508,"endColumn":30},{"ruleId":"148","severity":1,"message":"174","line":588,"column":6,"nodeType":"150","endLine":588,"endColumn":50,"suggestions":"175"},{"ruleId":"148","severity":1,"message":"174","line":605,"column":6,"nodeType":"150","endLine":605,"endColumn":46,"suggestions":"176"},{"ruleId":"138","severity":1,"message":"177","line":670,"column":13,"nodeType":"140","messageId":"141","endLine":670,"endColumn":28},{"ruleId":"138","severity":1,"message":"145","line":1837,"column":17,"nodeType":"140","messageId":"141","endLine":1837,"endColumn":22},{"ruleId":"138","severity":1,"message":"146","line":1838,"column":17,"nodeType":"140","messageId":"141","endLine":1838,"endColumn":24},{"ruleId":"138","severity":1,"message":"147","line":1839,"column":17,"nodeType":"140","messageId":"141","endLine":1839,"endColumn":22},{"ruleId":"142","severity":1,"message":"178","line":2068,"column":17,"nodeType":"140","messageId":"144","endLine":2068,"endColumn":19},{"ruleId":"142","severity":1,"message":"179","line":2068,"column":21,"nodeType":"140","messageId":"144","endLine":2068,"endColumn":23},{"ruleId":"148","severity":1,"message":"180","line":2271,"column":18,"nodeType":"140","endLine":2271,"endColumn":25},{"ruleId":"148","severity":1,"message":"181","line":2274,"column":6,"nodeType":"150","endLine":2274,"endColumn":40,"suggestions":"182"},{"ruleId":"138","severity":1,"message":"183","line":230,"column":22,"nodeType":"140","messageId":"141","endLine":230,"endColumn":35},{"ruleId":"138","severity":1,"message":"184","line":270,"column":13,"nodeType":"140","messageId":"141","endLine":270,"endColumn":14},{"ruleId":"138","severity":1,"message":"185","line":271,"column":13,"nodeType":"140","messageId":"141","endLine":271,"endColumn":14},{"ruleId":"138","severity":1,"message":"186","line":402,"column":12,"nodeType":"140","messageId":"141","endLine":402,"endColumn":20},{"ruleId":"138","severity":1,"message":"187","line":85,"column":14,"nodeType":"140","messageId":"141","endLine":85,"endColumn":15},{"ruleId":"188","severity":1,"message":"189","line":1,"column":1,"nodeType":"190","endLine":11,"endColumn":3},{"ruleId":"138","severity":1,"message":"191","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":13},{"ruleId":"138","severity":1,"message":"191","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":13},{"ruleId":"138","severity":1,"message":"191","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":13},{"ruleId":"138","severity":1,"message":"191","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":13},"no-unused-vars","'font' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'evt' is already defined.","redeclared","'pFill' is assigned a value but never used.","'pStroke' is assigned a value but never used.","'pName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dashSize', 'fill', 'gapSize', 'opacity', 'pageLoad', 'past', 'saveCanvasState', 'stroke.a', 'stroke.b', 'stroke.g', 'stroke.r', and 'strokeWidth'. Either include them or remove the dependency array. You can also do a functional update 'setPast(p => ...)' if you only need 'past' in the 'setPast' call.","ArrayExpression",["192"],"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"'SketchPicker' is defined but never used.","'imgNoStroke' is defined but never used.","'imgNoFill' is defined but never used.","'isPortrait' is assigned a value but never used.","'isRetina' is assigned a value but never used.","'windowDimensions' is assigned a value but never used.","'setWindowDimensions' is assigned a value but never used.","'currentStroke' is assigned a value but never used.","'showHighlightPicker' is assigned a value but never used.","'StrokeSwatchClick' is assigned a value but never used.","'FillSwatchClick' is assigned a value but never used.","'HighlightSwatchClick' is assigned a value but never used.","'StrokeSwatchClose' is assigned a value but never used.","'FillSwatchClose' is assigned a value but never used.","'HighlightSwatchClose' is assigned a value but never used.","'StrokeSwatchChange' is assigned a value but never used.","'FillSwatchChange' is assigned a value but never used.","'HighlightSwatchChange' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setShapeAttributes'. Either include it or remove the dependency array.",["195"],["196"],"'containerHeight' is assigned a value but never used.","'tx' is already defined.","'ty' is already defined.","The ref value 'imgFileRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'imgFileRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook React.useEffect has missing dependencies: 'dashSize', 'fill.a', 'fill.b', 'fill.g', 'fill.r', 'gapSize', 'opacity', 'pageLoad', 'past', 'pickerFill', 'pickerStroke', 'saveCanvasState', 'stroke.a', 'stroke.b', 'stroke.g', 'stroke.r', and 'strokeWidth'. Either include them or remove the dependency array. You can also do a functional update 'setPast(p => ...)' if you only need 'past' in the 'setPast' call.",["197"],"'setShowColors' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'openMenu' is defined but never used.","'h' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'React' is defined but never used.",{"desc":"198","fix":"199"},"no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [canvasRef, canvasTool, dashSize, fill, gapSize, opacity, pageLoad, past, saveCanvasState, setCanvas, stroke.a, stroke.b, stroke.g, stroke.r, strokeWidth]",{"range":"206","text":"207"},"Update the dependencies array to be: [pickerStroke, setPickerColorStroke, canvas, setShapeAttributes]",{"range":"208","text":"209"},"Update the dependencies array to be: [pickerFill, setPickerColorFill, canvas, setShapeAttributes]",{"range":"210","text":"211"},"Update the dependencies array to be: [canvasRef, canvasTool, dashSize, fill.a, fill.b, fill.g, fill.r, gapSize, opacity, pageLoad, past, pickerFill, pickerStroke, saveCanvasState, setCanvas, stroke.a, stroke.b, stroke.g, stroke.r, strokeWidth]",{"range":"212","text":"213"},[62952,62986],"[canvasRef, canvasTool, dashSize, fill, gapSize, opacity, pageLoad, past, saveCanvasState, setCanvas, stroke.a, stroke.b, stroke.g, stroke.r, strokeWidth]",[17933,17977],"[pickerStroke, setPickerColorStroke, canvas, setShapeAttributes]",[18494,18534],"[pickerFill, setPickerColorFill, canvas, setShapeAttributes]",[76199,76233],"[canvasRef, canvasTool, dashSize, fill.a, fill.b, fill.g, fill.r, gapSize, opacity, pageLoad, past, pickerFill, pickerStroke, saveCanvasState, setCanvas, stroke.a, stroke.b, stroke.g, stroke.r, strokeWidth]"]