{"ast":null,"code":"var _jsxFileName = \"c:\\\\Tutorials\\\\fabric-drawing\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport { fabric } from \"fabric\"; // Or you can use:\n// const fabric = require(\"fabric\").fabric;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst canvas = new fabric.Canvas(\"my-fabric-canvas\");\n\nconst App = () => {\n  _s();\n\n  const canvasRef = useRef();\n  const [canvas, setCanvas] = useState();\n  const [mX, setX] = useState(0);\n  const [mY, setY] = useState(0); //const refCanvas = useRef < fabric.Canvas > null;\n  //const [Rectangles, setRectangles] = useState([]);\n  //const [NewRectangle, setNewRectangle] = useState(true);\n  //const canvasRef = useRef();\n\n  var nRect = true;\n  var Rectangle = null;\n  var origX, origY; //const [gCanvas, setCanvas] = useState(null);\n  //const canvas = new fabric.Canvas(\"my-fabric-canvas\");\n  //const// canvas = new fabric.Canvas(\"my-fabric-canvas\");\n\n  React.useEffect(() => {\n    const canvas = new fabric.Canvas(canvasRef.current); //const canvas = canvasRef.current;\n    //setCanvas(new fabric.Canvas(\"my-fabric-canvas\"));\n    //const canvas = new fabric.Canvas(\"my-fabric-canvas\");\n    //setCanvas((gCanvas) => canvas);\n\n    const rect = new fabric.Rect({\n      width: 50,\n      height: 50,\n      fill: \"blue\",\n      angle: 10,\n      top: 20,\n      left: 20\n    });\n    const textbox = new fabric.Textbox(\"Click on the Rectangle to move it.\", {\n      fontSize: 20,\n      left: 50,\n      top: 100,\n      width: 200\n    });\n    canvas.add(textbox);\n    canvas.add(rect);\n    setCanvas(canvas); //refCanvas.current = canvas;\n    // UseEffect's cleanup function\n\n    return () => {\n      canvas.dispose(); //setCanvas(null);\n    };\n  }, [canvasRef, setCanvas]);\n\n  const handleMouseClick = event => {\n    return; //canvas = new fabric.Canvas(\"my-fabric-canvas\");\n\n    console.log(event.clientX);\n\n    if (nRect) {\n      var pointer = canvas.getPointer(event);\n      origX = pointer.x;\n      origY = pointer.y;\n      Rectangle = new fabric.Rect({\n        left: origX,\n        top: origY,\n        fill: \"transparent\",\n        stroke: \"red\",\n        strokeWidth: 3,\n        dirty: false\n      });\n      console.log(Rectangle);\n      canvas.add(Rectangle);\n      canvas.renderAll();\n      nRect = false; //setNewRectangle(false);\n    } else {\n      pointer = canvas.getPointer(event);\n\n      if (origX > pointer.x) {\n        Rectangle.set({\n          left: Math.abs(pointer.x)\n        });\n      }\n\n      if (origY > pointer.y) {\n        Rectangle.set({\n          top: Math.abs(pointer.y)\n        });\n      }\n\n      Rectangle.set({\n        width: Math.abs(origX - pointer.x)\n      });\n      Rectangle.set({\n        height: Math.abs(origY - pointer.y)\n      });\n      console.log(Rectangle);\n      canvas.renderAll();\n      nRect = true; //setNewRectangle(true);\n    } //console.log(pointer);\n\n  };\n\n  const handleMouseMove = event => {\n    //canvas.renderAll();\n    var pointer = canvas.getPointer(event);\n    console.log(pointer);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: handleMouseMove,\n    onClick: handleMouseClick,\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"my-fabric-canvas\",\n      width: \"1000\",\n      height: \"800\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"wp/Jr6/5jAl+/tqAi3lL8ZFswl0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["c:/Tutorials/fabric-drawing/src/App.js"],"names":["React","useRef","useState","fabric","canvas","Canvas","App","canvasRef","setCanvas","mX","setX","mY","setY","nRect","Rectangle","origX","origY","useEffect","current","rect","Rect","width","height","fill","angle","top","left","textbox","Textbox","fontSize","add","dispose","handleMouseClick","event","console","log","clientX","pointer","getPointer","x","y","stroke","strokeWidth","dirty","renderAll","set","Math","abs","handleMouseMove"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport \"./styles.css\";\n\nimport { fabric } from \"fabric\";\n// Or you can use:\n// const fabric = require(\"fabric\").fabric;\nconst canvas = new fabric.Canvas(\"my-fabric-canvas\");\nconst App = () => {\n  const canvasRef = useRef();\n  const [canvas, setCanvas] = useState();\n  const [mX, setX] = useState(0);\n  const [mY, setY] = useState(0);\n\n  //const refCanvas = useRef < fabric.Canvas > null;\n  //const [Rectangles, setRectangles] = useState([]);\n  //const [NewRectangle, setNewRectangle] = useState(true);\n  //const canvasRef = useRef();\n  var nRect = true;\n  var Rectangle = null;\n  var origX, origY;\n  //const [gCanvas, setCanvas] = useState(null);\n  //const canvas = new fabric.Canvas(\"my-fabric-canvas\");\n  //const// canvas = new fabric.Canvas(\"my-fabric-canvas\");\n\n  React.useEffect(() => {\n    const canvas = new fabric.Canvas(canvasRef.current);\n    //const canvas = canvasRef.current;\n    //setCanvas(new fabric.Canvas(\"my-fabric-canvas\"));\n    //const canvas = new fabric.Canvas(\"my-fabric-canvas\");\n    //setCanvas((gCanvas) => canvas);\n    const rect = new fabric.Rect({\n      width: 50,\n      height: 50,\n      fill: \"blue\",\n      angle: 10,\n      top: 20,\n      left: 20,\n    });\n    const textbox = new fabric.Textbox(\"Click on the Rectangle to move it.\", {\n      fontSize: 20,\n      left: 50,\n      top: 100,\n      width: 200,\n    });\n    canvas.add(textbox);\n    canvas.add(rect);\n    setCanvas(canvas);\n    //refCanvas.current = canvas;\n    // UseEffect's cleanup function\n    return () => {\n      canvas.dispose();\n      //setCanvas(null);\n    };\n  }, [canvasRef, setCanvas]);\n\n  const handleMouseClick = (event) => {\n    return;\n    //canvas = new fabric.Canvas(\"my-fabric-canvas\");\n    console.log(event.clientX);\n    if (nRect) {\n      var pointer = canvas.getPointer(event);\n      origX = pointer.x;\n      origY = pointer.y;\n      Rectangle = new fabric.Rect({\n        left: origX,\n        top: origY,\n        fill: \"transparent\",\n        stroke: \"red\",\n        strokeWidth: 3,\n        dirty: false,\n      });\n      console.log(Rectangle);\n      canvas.add(Rectangle);\n      canvas.renderAll();\n      nRect = false;\n      //setNewRectangle(false);\n    } else {\n      pointer = canvas.getPointer(event);\n      if (origX > pointer.x) {\n        Rectangle.set({ left: Math.abs(pointer.x) });\n      }\n      if (origY > pointer.y) {\n        Rectangle.set({ top: Math.abs(pointer.y) });\n      }\n      Rectangle.set({ width: Math.abs(origX - pointer.x) });\n      Rectangle.set({ height: Math.abs(origY - pointer.y) });\n      console.log(Rectangle);\n      canvas.renderAll();\n      nRect = true;\n      //setNewRectangle(true);\n    }\n\n    //console.log(pointer);\n  };\n  const handleMouseMove = (event) => {\n    //canvas.renderAll();\n    var pointer = canvas.getPointer(event);\n    console.log(pointer);\n  };\n\n  return (\n    <div\n      onMouseMove={handleMouseMove}\n      onClick={handleMouseClick}\n      className=\"App\"\n    >\n      <canvas ref={canvasRef} id=\"my-fabric-canvas\" width=\"1000\" height=\"800\" />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}