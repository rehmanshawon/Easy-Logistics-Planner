{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Tutorials/elp-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useRef}from\"react\";import styled from\"styled-components\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var InputWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  user-select: none;\\n  label {\\n    font-size: 15px;\\n    margin-right: 5px;\\n  }\\n  input {\\n    width: 35px;\\n    text-align: center;\\n    border: 1px solid #ddd;\\n    outline: 0;\\n    font-family: monospace;\\n    font-size: 15px;\\n    padding: 4px 4px;\\n    user-select: none;\\n    &:focus {\\n      background: #fafafa;\\n    }\\n    &::selection {\\n      background: #ddd;\\n    }\\n  }\\n\"])));var Input=function Input(_ref){var label=_ref.label,value=_ref.value,max=_ref.max,min=_ref.min,defaultValue=_ref.defaultValue,setValue=_ref.setValue;var input=useRef(null);function onBlur(e){if(e.target.value===\"\"){setValue(defaultValue);}else if(e.target.value<min){setValue(min);}}function onChange(e){var isDigit=/^\\d*$/;var newValue;if(isDigit.test(e.target.value)){if(Number(e.target.value)>max){newValue=max;}else{newValue=Number(e.target.value);}}else{newValue=defaultValue;}setValue(newValue);}return/*#__PURE__*/_jsxs(InputWrapper,{children:[/*#__PURE__*/_jsx(\"label\",{children:label}),/*#__PURE__*/_jsx(\"input\",{ref:input,value:value,onChange:onChange,onBlur:onBlur,autoFocus:false})]});};export default Input;","map":{"version":3,"sources":["C:/Tutorials/elp-app/src/components/Picker/Input.js"],"names":["React","useRef","styled","InputWrapper","div","Input","label","value","max","min","defaultValue","setValue","input","onBlur","e","target","onChange","isDigit","newValue","test","Number"],"mappings":"+KAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,KAA8B,OAA9B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,C,wFAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGD,MAAM,CAACE,GAAV,kfAAlB,CA0BP,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAwD,IAArDC,CAAAA,KAAqD,MAArDA,KAAqD,CAA9CC,KAA8C,MAA9CA,KAA8C,CAAvCC,GAAuC,MAAvCA,GAAuC,CAAlCC,GAAkC,MAAlCA,GAAkC,CAA7BC,YAA6B,MAA7BA,YAA6B,CAAfC,QAAe,MAAfA,QAAe,CACpE,GAAMC,CAAAA,KAAK,CAAGX,MAAM,CAAC,IAAD,CAApB,CAEA,QAASY,CAAAA,MAAT,CAAgBC,CAAhB,CAAmB,CACjB,GAAIA,CAAC,CAACC,MAAF,CAASR,KAAT,GAAmB,EAAvB,CAA2B,CACzBI,QAAQ,CAACD,YAAD,CAAR,CACD,CAFD,IAEO,IAAII,CAAC,CAACC,MAAF,CAASR,KAAT,CAAiBE,GAArB,CAA0B,CAC/BE,QAAQ,CAACF,GAAD,CAAR,CACD,CACF,CAED,QAASO,CAAAA,QAAT,CAAkBF,CAAlB,CAAqB,CACnB,GAAMG,CAAAA,OAAO,CAAG,OAAhB,CACA,GAAIC,CAAAA,QAAJ,CACA,GAAID,OAAO,CAACE,IAAR,CAAaL,CAAC,CAACC,MAAF,CAASR,KAAtB,CAAJ,CAAkC,CAChC,GAAIa,MAAM,CAACN,CAAC,CAACC,MAAF,CAASR,KAAV,CAAN,CAAyBC,GAA7B,CAAkC,CAChCU,QAAQ,CAAGV,GAAX,CACD,CAFD,IAEO,CACLU,QAAQ,CAAGE,MAAM,CAACN,CAAC,CAACC,MAAF,CAASR,KAAV,CAAjB,CACD,CACF,CAND,IAMO,CACLW,QAAQ,CAAGR,YAAX,CACD,CACDC,QAAQ,CAACO,QAAD,CAAR,CACD,CAED,mBACE,MAAC,YAAD,yBACE,uBAAQZ,KAAR,EADF,cAEE,cACE,GAAG,CAAEM,KADP,CAEE,KAAK,CAAEL,KAFT,CAGE,QAAQ,CAAES,QAHZ,CAIE,MAAM,CAAEH,MAJV,CAKE,SAAS,CAAE,KALb,EAFF,GADF,CAYD,CAtCD,CAwCA,cAAeR,CAAAA,KAAf","sourcesContent":["import React, { useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const InputWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  user-select: none;\r\n  label {\r\n    font-size: 15px;\r\n    margin-right: 5px;\r\n  }\r\n  input {\r\n    width: 35px;\r\n    text-align: center;\r\n    border: 1px solid #ddd;\r\n    outline: 0;\r\n    font-family: monospace;\r\n    font-size: 15px;\r\n    padding: 4px 4px;\r\n    user-select: none;\r\n    &:focus {\r\n      background: #fafafa;\r\n    }\r\n    &::selection {\r\n      background: #ddd;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Input = ({ label, value, max, min, defaultValue, setValue }) => {\r\n  const input = useRef(null);\r\n\r\n  function onBlur(e) {\r\n    if (e.target.value === \"\") {\r\n      setValue(defaultValue);\r\n    } else if (e.target.value < min) {\r\n      setValue(min);\r\n    }\r\n  }\r\n\r\n  function onChange(e) {\r\n    const isDigit = /^\\d*$/;\r\n    var newValue;\r\n    if (isDigit.test(e.target.value)) {\r\n      if (Number(e.target.value) > max) {\r\n        newValue = max;\r\n      } else {\r\n        newValue = Number(e.target.value);\r\n      }\r\n    } else {\r\n      newValue = defaultValue;\r\n    }\r\n    setValue(newValue);\r\n  }\r\n\r\n  return (\r\n    <InputWrapper>\r\n      <label>{label}</label>\r\n      <input\r\n        ref={input}\r\n        value={value}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        autoFocus={false}\r\n      />\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}