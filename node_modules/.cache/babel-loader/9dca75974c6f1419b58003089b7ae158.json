{"ast":null,"code":"export const parseHSL = color => color.replace(/[^\\d.,]/g, \"\").split(\",\").map(Number);\nexport const copyToClipboard = input => {\n  const el = document.createElement(\"textarea\");\n  el.value = input;\n  el.setAttribute(\"readonly\", \"\");\n  el.style.contain = \"strict\";\n  el.style.position = \"absolute\";\n  el.style.left = \"-9999px\";\n  el.style.fontSize = \"12pt\";\n  const selection = document.getSelection();\n  let originalRange = false;\n\n  if (selection.rangeCount > 0) {\n    originalRange = selection.getRangeAt(0);\n  }\n\n  document.body.appendChild(el);\n  el.select();\n  el.selectionStart = 0;\n  el.selectionEnd = input.length;\n  let success = false;\n\n  try {\n    success = document.execCommand(\"copy\");\n  } catch (err) {}\n\n  document.body.removeChild(el);\n\n  if (originalRange) {\n    selection.removeAllRanges();\n    selection.addRange(originalRange);\n  }\n\n  return success;\n};\nexport const convertRGBtoHSL = rgb => {\n  const r = rgb[0] / 255;\n  const g = rgb[1] / 255;\n  const b = rgb[2] / 255;\n  const min = Math.min(r, g, b);\n  const max = Math.max(r, g, b);\n  const delta = max - min;\n  let h;\n  let s;\n\n  if (max === min) {\n    h = 0;\n  } else if (r === max) {\n    h = (g - b) / delta;\n  } else if (g === max) {\n    h = 2 + (b - r) / delta;\n  } else if (b === max) {\n    h = 4 + (r - g) / delta;\n  }\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  const l = (min + max) / 2;\n\n  if (max === min) {\n    s = 0;\n  } else if (l <= 0.5) {\n    s = delta / (max + min);\n  } else {\n    s = delta / (2 - max - min);\n  }\n\n  return [Math.round(h), Math.round(s * 100), Math.round(l * 100)];\n};\n\nconst toHex = c => {\n  const n = c.toString(16);\n  return n.length === 1 ? \"0\" + n.toUpperCase() : n.toUpperCase();\n};\n\nexport const convertHSLToRGB = ([h, s, l, a]) => {\n  var r, g, b;\n  h = h / 360;\n  s = s / 100;\n  l = l / 100;\n\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    var hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  const red = Math.round(r * 255);\n  const green = Math.round(g * 255);\n  const blue = Math.round(b * 255);\n  const rgb = `rgb(${red}, ${green}, ${blue})`;\n  const rgba = `rgba(${red}, ${green}, ${blue}, ${a === 1 ? 1 : a.toFixed(2)})`;\n  const hex = `#${toHex(red)}${toHex(green)}${toHex(blue)}`;\n  const hexa = `#${toHex(red)}${toHex(green)}${toHex(blue)}${toHex(Math.round(a * 255))}`;\n  return {\n    rgb,\n    rgba,\n    hex,\n    hexa,\n    red,\n    green,\n    blue,\n    a\n  };\n};\nexport const RGBAToHSLA = rgba => {\n  let sep = rgba.indexOf(\",\") > -1 ? \",\" : \" \";\n  rgba = rgba.substr(5).split(\")\")[0].split(sep); // Strip the slash if using space-separated syntax\n\n  if (rgba.indexOf(\"/\") > -1) rgba.splice(3, 1);\n\n  for (let R in rgba) {\n    let r = rgba[R];\n\n    if (r.indexOf(\"%\") > -1) {\n      let p = r.substr(0, r.length - 1) / 100;\n\n      if (R < 3) {\n        rgba[R] = Math.round(p * 255);\n      } else {\n        rgba[R] = p;\n      }\n    }\n  } // Make r, g, and b fractions of 1\n\n\n  let r = rgba[0] / 255,\n      g = rgba[1] / 255,\n      b = rgba[2] / 255,\n      a = rgba[3];\n  let cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0; // Calculate hue\n  // No difference\n\n  if (delta === 0) h = 0; // Red is max\n  else if (cmax === r) h = (g - b) / delta % 6; // Green is max\n    else if (cmax === g) h = (b - r) / delta + 2; // Blue is max\n      else h = (r - g) / delta + 4;\n  h = Math.round(h * 60); // Make negative hues positive behind 360Â°\n\n  if (h < 0) h += 360; // Calculate lightness\n\n  l = (cmax + cmin) / 2; // Calculate saturation\n\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1)); // Multiply l and s by 100\n\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n  return \"hsla(\" + h + \",\" + s + \"%,\" + l + \"%,\" + a + \")\"; // console.log(rgba[0], rgba[1], rgba[2], a);\n  // Rest of RGB-to-HSL logic\n  //...\n};\n_c = RGBAToHSLA;\n\nvar _c;\n\n$RefreshReg$(_c, \"RGBAToHSLA\");","map":{"version":3,"sources":["C:/Tutorials/elp-app/src/components/Picker/utils.js"],"names":["parseHSL","color","replace","split","map","Number","copyToClipboard","input","el","document","createElement","value","setAttribute","style","contain","position","left","fontSize","selection","getSelection","originalRange","rangeCount","getRangeAt","body","appendChild","select","selectionStart","selectionEnd","length","success","execCommand","err","removeChild","removeAllRanges","addRange","convertRGBtoHSL","rgb","r","g","b","min","Math","max","delta","h","s","l","round","toHex","c","n","toString","toUpperCase","convertHSLToRGB","a","hue2rgb","p","q","t","red","green","blue","rgba","toFixed","hex","hexa","RGBAToHSLA","sep","indexOf","substr","splice","R","cmin","cmax","abs"],"mappings":"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","sourcesContent":["export const parseHSL = (color) =>\n  color\n    .replace(/[^\\d.,]/g, \"\")\n    .split(\",\")\n    .map(Number);\n\nexport const copyToClipboard = (input) => {\n  const el = document.createElement(\"textarea\");\n  el.value = input;\n  el.setAttribute(\"readonly\", \"\");\n  el.style.contain = \"strict\";\n  el.style.position = \"absolute\";\n  el.style.left = \"-9999px\";\n  el.style.fontSize = \"12pt\";\n\n  const selection = document.getSelection();\n  let originalRange = false;\n  if (selection.rangeCount > 0) {\n    originalRange = selection.getRangeAt(0);\n  }\n\n  document.body.appendChild(el);\n  el.select();\n  el.selectionStart = 0;\n  el.selectionEnd = input.length;\n\n  let success = false;\n  try {\n    success = document.execCommand(\"copy\");\n  } catch (err) {}\n\n  document.body.removeChild(el);\n\n  if (originalRange) {\n    selection.removeAllRanges();\n    selection.addRange(originalRange);\n  }\n\n  return success;\n};\n\nexport const convertRGBtoHSL = (rgb) => {\n  const r = rgb[0] / 255;\n  const g = rgb[1] / 255;\n  const b = rgb[2] / 255;\n  const min = Math.min(r, g, b);\n  const max = Math.max(r, g, b);\n  const delta = max - min;\n  let h;\n  let s;\n\n  if (max === min) {\n    h = 0;\n  } else if (r === max) {\n    h = (g - b) / delta;\n  } else if (g === max) {\n    h = 2 + (b - r) / delta;\n  } else if (b === max) {\n    h = 4 + (r - g) / delta;\n  }\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  const l = (min + max) / 2;\n\n  if (max === min) {\n    s = 0;\n  } else if (l <= 0.5) {\n    s = delta / (max + min);\n  } else {\n    s = delta / (2 - max - min);\n  }\n\n  return [Math.round(h), Math.round(s * 100), Math.round(l * 100)];\n};\n\nconst toHex = (c) => {\n  const n = c.toString(16);\n  return n.length === 1 ? \"0\" + n.toUpperCase() : n.toUpperCase();\n};\n\nexport const convertHSLToRGB = ([h, s, l, a]) => {\n  var r, g, b;\n  h = h / 360;\n  s = s / 100;\n  l = l / 100;\n\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    var hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  const red = Math.round(r * 255);\n  const green = Math.round(g * 255);\n  const blue = Math.round(b * 255);\n\n  const rgb = `rgb(${red}, ${green}, ${blue})`;\n  const rgba = `rgba(${red}, ${green}, ${blue}, ${a === 1 ? 1 : a.toFixed(2)})`;\n  const hex = `#${toHex(red)}${toHex(green)}${toHex(blue)}`;\n  const hexa = `#${toHex(red)}${toHex(green)}${toHex(blue)}${toHex(\n    Math.round(a * 255)\n  )}`;\n\n  return { rgb, rgba, hex, hexa, red, green, blue, a };\n};\n\nexport const RGBAToHSLA = (rgba) => {\n  let sep = rgba.indexOf(\",\") > -1 ? \",\" : \" \";\n  rgba = rgba.substr(5).split(\")\")[0].split(sep);\n\n  // Strip the slash if using space-separated syntax\n  if (rgba.indexOf(\"/\") > -1) rgba.splice(3, 1);\n\n  for (let R in rgba) {\n    let r = rgba[R];\n    if (r.indexOf(\"%\") > -1) {\n      let p = r.substr(0, r.length - 1) / 100;\n\n      if (R < 3) {\n        rgba[R] = Math.round(p * 255);\n      } else {\n        rgba[R] = p;\n      }\n    }\n  }\n\n  // Make r, g, and b fractions of 1\n  let r = rgba[0] / 255,\n    g = rgba[1] / 255,\n    b = rgba[2] / 255,\n    a = rgba[3];\n  let cmin = Math.min(r, g, b),\n    cmax = Math.max(r, g, b),\n    delta = cmax - cmin,\n    h = 0,\n    s = 0,\n    l = 0;\n  // Calculate hue\n  // No difference\n  if (delta === 0) h = 0;\n  // Red is max\n  else if (cmax === r) h = ((g - b) / delta) % 6;\n  // Green is max\n  else if (cmax === g) h = (b - r) / delta + 2;\n  // Blue is max\n  else h = (r - g) / delta + 4;\n\n  h = Math.round(h * 60);\n\n  // Make negative hues positive behind 360Â°\n  if (h < 0) h += 360;\n  // Calculate lightness\n  l = (cmax + cmin) / 2;\n\n  // Calculate saturation\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n  // Multiply l and s by 100\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n\n  return \"hsla(\" + h + \",\" + s + \"%,\" + l + \"%,\" + a + \")\";\n  // console.log(rgba[0], rgba[1], rgba[2], a);\n  // Rest of RGB-to-HSL logic\n  //...\n};\n"]},"metadata":{},"sourceType":"module"}