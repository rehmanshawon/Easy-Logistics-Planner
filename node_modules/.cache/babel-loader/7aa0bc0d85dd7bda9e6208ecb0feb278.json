{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport config from \"./config\";\nconst {\n  squareSize,\n  barSize,\n  checkerSize,\n  checkerFill\n} = config;\n\nconst usePaintAlpha = (canvas, hue) => {\n  _s();\n\n  useEffect(() => {\n    const ctx = canvas.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, squareSize, barSize);\n    const rows = Math.round(barSize / checkerSize);\n    const cols = Math.round(squareSize / checkerSize);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols / 2; j++) {\n        const x = j * checkerSize * 2 + (i % 2 ? 0 : checkerSize);\n        const y = i * checkerSize;\n        ctx.rect(x, y, checkerSize, checkerSize);\n      }\n    }\n\n    ctx.fillStyle = checkerFill;\n    ctx.fill();\n    const gradient = ctx.createLinearGradient(0, 0, squareSize, 0);\n    gradient.addColorStop(0, `hsla(${hue}, 100%, 50%, 0)`);\n    gradient.addColorStop(1, `hsla(${hue}, 100%, 50%, 1)`);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, squareSize, barSize);\n  }, [canvas, hue]);\n};\n\n_s(usePaintAlpha, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default usePaintAlpha;","map":{"version":3,"sources":["C:/Tutorials/elp-app/src/components/Picker/usePaintAlpha.js"],"names":["React","useEffect","config","squareSize","barSize","checkerSize","checkerFill","usePaintAlpha","canvas","hue","ctx","current","getContext","clearRect","rows","Math","round","cols","i","j","x","y","rect","fillStyle","fill","gradient","createLinearGradient","addColorStop","fillRect"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,OAAd;AAAuBC,EAAAA,WAAvB;AAAoCC,EAAAA;AAApC,IAAoDJ,MAA1D;;AAEA,MAAMK,aAAa,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAAA;;AACrCR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,GAAG,GAAGF,MAAM,CAACG,OAAP,CAAeC,UAAf,CAA0B,IAA1B,CAAZ;AACAF,IAAAA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBV,UAApB,EAAgCC,OAAhC;AAEA,UAAMU,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWZ,OAAO,GAAGC,WAArB,CAAb;AACA,UAAMY,IAAI,GAAGF,IAAI,CAACC,KAAL,CAAWb,UAAU,GAAGE,WAAxB,CAAb;;AACA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,GAAG,CAA3B,EAA8BE,CAAC,EAA/B,EAAmC;AACjC,cAAMC,CAAC,GAAGD,CAAC,GAAGd,WAAJ,GAAkB,CAAlB,IAAuBa,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAYb,WAAnC,CAAV;AACA,cAAMgB,CAAC,GAAGH,CAAC,GAAGb,WAAd;AACAK,QAAAA,GAAG,CAACY,IAAJ,CAASF,CAAT,EAAYC,CAAZ,EAAehB,WAAf,EAA4BA,WAA5B;AACD;AACF;;AACDK,IAAAA,GAAG,CAACa,SAAJ,GAAgBjB,WAAhB;AACAI,IAAAA,GAAG,CAACc,IAAJ;AAEA,UAAMC,QAAQ,GAAGf,GAAG,CAACgB,oBAAJ,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BvB,UAA/B,EAA2C,CAA3C,CAAjB;AACAsB,IAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAA0B,QAAOlB,GAAI,iBAArC;AACAgB,IAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAA0B,QAAOlB,GAAI,iBAArC;AACAC,IAAAA,GAAG,CAACa,SAAJ,GAAgBE,QAAhB;AACAf,IAAAA,GAAG,CAACkB,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBzB,UAAnB,EAA+BC,OAA/B;AACD,GArBQ,EAqBN,CAACI,MAAD,EAASC,GAAT,CArBM,CAAT;AAsBD,CAvBD;;GAAMF,a;;AAyBN,eAAeA,aAAf","sourcesContent":["import React, { useEffect } from \"react\"\r\nimport config from \"./config\"\r\n\r\nconst { squareSize, barSize, checkerSize, checkerFill } = config\r\n\r\nconst usePaintAlpha = (canvas, hue) => {\r\n  useEffect(() => {\r\n    const ctx = canvas.current.getContext(\"2d\")\r\n    ctx.clearRect(0, 0, squareSize, barSize)\r\n\r\n    const rows = Math.round(barSize / checkerSize)\r\n    const cols = Math.round(squareSize / checkerSize)\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols / 2; j++) {\r\n        const x = j * checkerSize * 2 + (i % 2 ? 0 : checkerSize)\r\n        const y = i * checkerSize\r\n        ctx.rect(x, y, checkerSize, checkerSize)\r\n      }\r\n    }\r\n    ctx.fillStyle = checkerFill\r\n    ctx.fill()\r\n\r\n    const gradient = ctx.createLinearGradient(0, 0, squareSize, 0)\r\n    gradient.addColorStop(0, `hsla(${hue}, 100%, 50%, 0)`)\r\n    gradient.addColorStop(1, `hsla(${hue}, 100%, 50%, 1)`)\r\n    ctx.fillStyle = gradient\r\n    ctx.fillRect(0, 0, squareSize, barSize)\r\n  }, [canvas, hue])\r\n}\r\n\r\nexport default usePaintAlpha\r\n"]},"metadata":{},"sourceType":"module"}