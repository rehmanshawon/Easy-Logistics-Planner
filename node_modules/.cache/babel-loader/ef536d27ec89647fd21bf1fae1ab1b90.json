{"ast":null,"code":"var _jsxFileName = \"C:\\\\Tutorials\\\\elp-app\\\\src\\\\components\\\\Picker\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InputWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  user-select: none;\n  label {\n    font-size: 11px;\n    margin-right: 5px;\n  }\n  input {\n    width: 35px;\n    text-align: center;\n    border: 1px solid #ddd;\n    outline: 0;\n    font-family: monospace;\n    font-size: 10px;\n    padding: 4px 4px;\n    user-select: none;\n    &:focus {\n      background: #fafafa;\n    }\n    &::selection {\n      background: #ddd;\n    }\n  }\n`;\n_c = InputWrapper;\n\nconst Input = ({\n  label,\n  value,\n  max,\n  min,\n  defaultValue,\n  setValue\n}) => {\n  _s();\n\n  const input = useRef(null);\n\n  function onBlur(e) {\n    if (e.target.value === \"\") {\n      setValue(defaultValue);\n    } else if (e.target.value < min) {\n      setValue(min);\n    }\n  }\n\n  function onChange(e) {\n    const isDigit = /^\\d*$/;\n    var newValue;\n\n    if (isDigit.test(e.target.value)) {\n      if (Number(e.target.value) > max) {\n        newValue = max;\n      } else {\n        newValue = Number(e.target.value);\n      }\n    } else {\n      newValue = defaultValue;\n    }\n\n    setValue(newValue);\n  }\n\n  return /*#__PURE__*/_jsxDEV(InputWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: input,\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      autoFocus: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"nlIcl0voJvDyuV7TOciSdgd9B4g=\");\n\n_c2 = Input;\nexport default Input;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputWrapper\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["C:/Tutorials/elp-app/src/components/Picker/Input.js"],"names":["React","useRef","styled","InputWrapper","div","Input","label","value","max","min","defaultValue","setValue","input","onBlur","e","target","onChange","isDigit","newValue","test","Number"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,OAAO,MAAMC,YAAY,GAAGD,MAAM,CAACE,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBO;KAAMD,Y;;AA0Bb,MAAME,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,GAAhB;AAAqBC,EAAAA,GAArB;AAA0BC,EAAAA,YAA1B;AAAwCC,EAAAA;AAAxC,CAAD,KAAwD;AAAA;;AACpE,QAAMC,KAAK,GAAGX,MAAM,CAAC,IAAD,CAApB;;AAEA,WAASY,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,QAAIA,CAAC,CAACC,MAAF,CAASR,KAAT,KAAmB,EAAvB,EAA2B;AACzBI,MAAAA,QAAQ,CAACD,YAAD,CAAR;AACD,KAFD,MAEO,IAAII,CAAC,CAACC,MAAF,CAASR,KAAT,GAAiBE,GAArB,EAA0B;AAC/BE,MAAAA,QAAQ,CAACF,GAAD,CAAR;AACD;AACF;;AAED,WAASO,QAAT,CAAkBF,CAAlB,EAAqB;AACnB,UAAMG,OAAO,GAAG,OAAhB;AACA,QAAIC,QAAJ;;AACA,QAAID,OAAO,CAACE,IAAR,CAAaL,CAAC,CAACC,MAAF,CAASR,KAAtB,CAAJ,EAAkC;AAChC,UAAIa,MAAM,CAACN,CAAC,CAACC,MAAF,CAASR,KAAV,CAAN,GAAyBC,GAA7B,EAAkC;AAChCU,QAAAA,QAAQ,GAAGV,GAAX;AACD,OAFD,MAEO;AACLU,QAAAA,QAAQ,GAAGE,MAAM,CAACN,CAAC,CAACC,MAAF,CAASR,KAAV,CAAjB;AACD;AACF,KAND,MAMO;AACLW,MAAAA,QAAQ,GAAGR,YAAX;AACD;;AACDC,IAAAA,QAAQ,CAACO,QAAD,CAAR;AACD;;AAED,sBACE,QAAC,YAAD;AAAA,4BACE;AAAA,gBAAQZ;AAAR;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,GAAG,EAAEM,KADP;AAEE,MAAA,KAAK,EAAEL,KAFT;AAGE,MAAA,QAAQ,EAAES,QAHZ;AAIE,MAAA,MAAM,EAAEH,MAJV;AAKE,MAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAtCD;;GAAMR,K;;MAAAA,K;AAwCN,eAAeA,KAAf","sourcesContent":["import React, { useRef } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nexport const InputWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  user-select: none;\r\n  label {\r\n    font-size: 11px;\r\n    margin-right: 5px;\r\n  }\r\n  input {\r\n    width: 35px;\r\n    text-align: center;\r\n    border: 1px solid #ddd;\r\n    outline: 0;\r\n    font-family: monospace;\r\n    font-size: 10px;\r\n    padding: 4px 4px;\r\n    user-select: none;\r\n    &:focus {\r\n      background: #fafafa;\r\n    }\r\n    &::selection {\r\n      background: #ddd;\r\n    }\r\n  }\r\n`\r\n\r\nconst Input = ({ label, value, max, min, defaultValue, setValue }) => {\r\n  const input = useRef(null)\r\n\r\n  function onBlur(e) {\r\n    if (e.target.value === \"\") {\r\n      setValue(defaultValue)\r\n    } else if (e.target.value < min) {\r\n      setValue(min)\r\n    }\r\n  }\r\n\r\n  function onChange(e) {\r\n    const isDigit = /^\\d*$/\r\n    var newValue\r\n    if (isDigit.test(e.target.value)) {\r\n      if (Number(e.target.value) > max) {\r\n        newValue = max\r\n      } else {\r\n        newValue = Number(e.target.value)\r\n      }\r\n    } else {\r\n      newValue = defaultValue\r\n    }\r\n    setValue(newValue)\r\n  }\r\n\r\n  return (\r\n    <InputWrapper>\r\n      <label>{label}</label>\r\n      <input\r\n        ref={input}\r\n        value={value}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        autoFocus={false}\r\n      />\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nexport default Input\r\n"]},"metadata":{},"sourceType":"module"}