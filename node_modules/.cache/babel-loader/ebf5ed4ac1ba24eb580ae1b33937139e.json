{"ast":null,"code":"var _jsxFileName = \"c:\\\\Tutorials\\\\fabric-drawing\\\\src\\\\App.js\";\nimport React, { useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport { fabric } from \"fabric\"; // Or you can use:\n// const fabric = require(\"fabric\").fabric;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  //const [Rectangles, setRectangles] = useState([]);\n  //const [NewRectangle, setNewRectangle] = useState(true);\n  //const canvasRef = useRef();\n  var nRect = true;\n  var Rectangle = null;\n  var origX, origY; //const [gCanvas, setCanvas] = useState(null);\n  //const canvas = new fabric.Canvas(\"my-fabric-canvas\");\n\n  let canvas = new fabric.Canvas(\"my-fabric-canvas\");\n  /*\n  React.useEffect(() => {\n    //const canvas = canvasRef.current;\n    //setCanvas(new fabric.Canvas(\"my-fabric-canvas\"));\n    canvas = new fabric.Canvas(\"my-fabric-canvas\");\n    //setCanvas((gCanvas) => canvas);\n    const rect = new fabric.Rect({\n      width: 50,\n      height: 50,\n      fill: \"blue\",\n      angle: 10,\n      top: 20,\n      left: 20,\n    });\n    const textbox = new fabric.Textbox(\"Click on the Rectangle to move it.\", {\n      fontSize: 20,\n      left: 50,\n      top: 100,\n      width: 200,\n    });\n    canvas.add(textbox);\n    canvas.add(rect);\n     // UseEffect's cleanup function\n    return () => {\n      canvas.dispose();\n      //setCanvas(null);\n    };\n  }, []);\n  */\n\n  const handleMouseClick = event => {\n    canvas = new fabric.Canvas(\"my-fabric-canvas\");\n\n    if (nRect) {\n      var pointer = canvas.getPointer(event);\n      origX = pointer.x;\n      origY = pointer.y;\n      Rectangle = new fabric.Rect({\n        left: origX,\n        top: origY,\n        fill: \"transparent\",\n        stroke: \"red\",\n        strokeWidth: 3,\n        dirty: false\n      });\n      console.log(Rectangle);\n      canvas.add(Rectangle);\n      nRect = false; //setNewRectangle(false);\n    } else {\n      pointer = canvas.getPointer(event);\n\n      if (origX > pointer.x) {\n        Rectangle.set({\n          left: Math.abs(pointer.x)\n        });\n      }\n\n      if (origY > pointer.y) {\n        Rectangle.set({\n          top: Math.abs(pointer.y)\n        });\n      }\n\n      Rectangle.set({\n        width: Math.abs(origX - pointer.x)\n      });\n      Rectangle.set({\n        height: Math.abs(origY - pointer.y)\n      });\n      console.log(Rectangle); //canvas.renderAll();\n\n      nRect = true; //setNewRectangle(true);\n    } //console.log(pointer);\n\n  };\n\n  const handleMouseMove = event => {//var pointer = canvas.getPointer(event);\n    //console.log(pointer);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: handleMouseMove,\n    onClick: handleMouseClick,\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"my-fabric-canvas\",\n      width: \"1000\",\n      height: \"800\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["c:/Tutorials/fabric-drawing/src/App.js"],"names":["React","useRef","useState","fabric","App","nRect","Rectangle","origX","origY","canvas","Canvas","handleMouseClick","event","pointer","getPointer","x","y","Rect","left","top","fill","stroke","strokeWidth","dirty","console","log","add","set","Math","abs","width","height","handleMouseMove"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport \"./styles.css\";\n\nimport { fabric } from \"fabric\";\n// Or you can use:\n// const fabric = require(\"fabric\").fabric;\n\nconst App = () => {\n  //const [Rectangles, setRectangles] = useState([]);\n  //const [NewRectangle, setNewRectangle] = useState(true);\n  //const canvasRef = useRef();\n  var nRect = true;\n  var Rectangle = null;\n  var origX, origY;\n  //const [gCanvas, setCanvas] = useState(null);\n  //const canvas = new fabric.Canvas(\"my-fabric-canvas\");\n  let canvas = new fabric.Canvas(\"my-fabric-canvas\");\n  /*\n  React.useEffect(() => {\n    //const canvas = canvasRef.current;\n    //setCanvas(new fabric.Canvas(\"my-fabric-canvas\"));\n    canvas = new fabric.Canvas(\"my-fabric-canvas\");\n    //setCanvas((gCanvas) => canvas);\n    const rect = new fabric.Rect({\n      width: 50,\n      height: 50,\n      fill: \"blue\",\n      angle: 10,\n      top: 20,\n      left: 20,\n    });\n    const textbox = new fabric.Textbox(\"Click on the Rectangle to move it.\", {\n      fontSize: 20,\n      left: 50,\n      top: 100,\n      width: 200,\n    });\n    canvas.add(textbox);\n    canvas.add(rect);\n\n    // UseEffect's cleanup function\n    return () => {\n      canvas.dispose();\n      //setCanvas(null);\n    };\n  }, []);\n*/\n  const handleMouseClick = (event) => {\n    canvas = new fabric.Canvas(\"my-fabric-canvas\");\n\n    if (nRect) {\n      var pointer = canvas.getPointer(event);\n      origX = pointer.x;\n      origY = pointer.y;\n      Rectangle = new fabric.Rect({\n        left: origX,\n        top: origY,\n        fill: \"transparent\",\n        stroke: \"red\",\n        strokeWidth: 3,\n        dirty: false,\n      });\n      console.log(Rectangle);\n      canvas.add(Rectangle);\n      nRect = false;\n      //setNewRectangle(false);\n    } else {\n      pointer = canvas.getPointer(event);\n      if (origX > pointer.x) {\n        Rectangle.set({ left: Math.abs(pointer.x) });\n      }\n      if (origY > pointer.y) {\n        Rectangle.set({ top: Math.abs(pointer.y) });\n      }\n      Rectangle.set({ width: Math.abs(origX - pointer.x) });\n      Rectangle.set({ height: Math.abs(origY - pointer.y) });\n      console.log(Rectangle);\n      //canvas.renderAll();\n      nRect = true;\n      //setNewRectangle(true);\n    }\n\n    //console.log(pointer);\n  };\n  const handleMouseMove = (event) => {\n    //var pointer = canvas.getPointer(event);\n    //console.log(pointer);\n  };\n\n  return (\n    <div\n      onMouseMove={handleMouseMove}\n      onClick={handleMouseClick}\n      className=\"App\"\n    >\n      <canvas id=\"my-fabric-canvas\" width=\"1000\" height=\"800\" />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}